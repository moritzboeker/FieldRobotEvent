DWAPlannerROS: 
    acc_lim_x: 2.5 # (double, default: 2.5) The x acceleration limit of the robot in meters/sec^2 
    acc_lim_y: 2.5 # (double, default: 2.5) The y acceleration limit of the robot in meters/sec^2 
    acc_lim_th: 1.6 # (double, default: 3.2) The rotational acceleration limit of the robot in radians/sec^2 

    max_vel_trans: 0.55 # (double, default: 0.55) The absolute value of the maximum translational velocity for the robot in m/s 
    min_vel_trans: 0.05 # (double, default: 0.1) The absolute value of the minimum translational velocity for the robot in m/s 

    max_vel_x: 0.55 # (double, default: 0.55) The maximum x velocity for the robot in m/s. 
    min_vel_x: -0.55 # (double, default: 0.0) The minimum x velocity for the robot in m/s, negative for backwards motion. 

    max_vel_y: 0.0 # (double, default: 0.1) The maximum y velocity for the robot in m/s 
    min_vel_y: 0.0 # (double, default: -0.1) The minimum y velocity for the robot in m/s 

    max_vel_theta: 1.0 # (double, default: 1.0) The absolute value of the maximum rotational velocity for the robot in radians/sec 
    min_vel_theta: 0.1 # (double, default: 0.4) The absolute value of the minimum rotational velocity for the robot in radians/sec

    yaw_goal_tolerance: 0.05 # (double, default: 0.05) The tolerance in radians for the controller in yaw/rotation when achieving its goal 
    xy_goal_tolerance: 0.10 # (double, default: 0.10) The tolerance in meters for the controller in the x & y distance when achieving a goal 
    latch_xy_goal_tolerance: false # (bool, default: false) If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.

    sim_time: 1.7 # (double, default: 1.7) The amount of time to roll trajectories out for in seconds 
    sim_granularity: 0.025 # (double, default: 0.025) The granularity with which to check for collisions along each trajectory in meters
    angular_sim_granularity: 0.1 # (double, default: 0.1) The granularity with which to check for collisions for rotations in radians 
    vx_samples: 8 # (integer, default: 3) The number of samples to use when exploring the x velocity space 
    vy_samples: 10 # (integer, default: 10) The number of samples to use when exploring the y velocity space
    vth_samples: 20 # (integer, default: 20) The number of samples to use when exploring the theta velocity space 	
    use_dwa: True # (bool, default: True) Use dynamic window approach to constrain sampling velocities to small window.
    controller_frequency: 20.0 # (double, default: 20.0) The frequency at which this controller will be called in Hz.

    path_distance_bias: 0.01 # (double, default: 0.6) The weight for the path distance part of the cost function
    goal_distance_bias: 1.0 # (double, default: 0.8) The weight for the goal distance part of the cost function 
    occdist_scale: 0.01 # (double, default: 0.01) The weight for the obstacle distance part of the cost function
    twirling_scale: 0.0 # (double, default: 0.0) The weight for penalizing any changes in robot heading

# pdist_scale_ = resolution * config.path_distance_bias; 	// pdist_scale_ = 0.05 m * 0.6 = 0.03
# gdist_scale_ = resolution * config.goal_distance_bias;	// gdist_scale_ = 0.05 m * 0.8 = 0.04
# occdist_scale_ = config.occdist_scale;			// occdist_scale_ = 0.01
# total_cost = pdist_scale_ * path_cost + gdist_scale_ * goal_cost + occdist_scale_ * occ_cost;

    forward_point_distance: 0.325 # (double, default: 0.325) The distance from the center point of the robot to place an additional scoring point, in meters 
    stop_time_buffer: 0.2 # (double, default: 0.2) The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds 
    scaling_speed: 0.25 # (double, default: 0.25) The absolute value of the velocity at which to start scaling the robot's footprint, in m/s  
    max_scaling_factor: 0.2 # (double, default: 0.2) The maximum factor to scale the robot's footprint by 
    publish_cost_grid: true # (bool, default: false) Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account. 
    oscillation_reset_dist: 0.05 # (double, default: 0.05) The distance the robot must travel before oscillation flags are reset, in meters 
    oscillation_reset_angle: 0.2 # (double, default: 0.2) The angle the robot must turn before oscillation flags are reset, in radians
    prune_plan: true # (bool, default: true) Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
